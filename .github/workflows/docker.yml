name: Build & Push Docker Images (GHCR)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write # allow pushing to GHCR

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ts-mern-azure-starter
  OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    name: Build & Push (${{ matrix.service }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - service: backend
            context: ./backend
            dockerfile: Dockerfile.prod
            # no build-args for backend
          - service: frontend
            context: ./frontend
            dockerfile: Dockerfile.prod
            build-args: |
              VITE_API_URL=${{ vars.PROD_VITE_API_URL || 'http://localhost:8080' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch, optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: ${{ matrix.build-args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
